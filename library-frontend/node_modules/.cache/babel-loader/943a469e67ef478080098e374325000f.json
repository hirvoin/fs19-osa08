{"ast":null,"code":"import _slicedToArray from \"/home/aatu/programming/authors/library-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/home/aatu/programming/authors/library-frontend/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/aatu/programming/authors/library-frontend/src/components/Authors.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  {\\n    allAuthors {\\n      name\\n      born\\n      bookCount\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from \"react\";\nimport { Query } from \"react-apollo\";\nimport { gql } from \"apollo-boost\";\nvar ALL_AUTHORS = gql(_templateObject());\n\nvar Authors = function Authors(props) {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      birthyear = _useState2[0],\n      setBirthyear = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      author = _useState4[0],\n      setAuthor = _useState4[1];\n\n  if (!props.show) {\n    return null;\n  }\n\n  var authors = [];\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, \"Authors\"), React.createElement(Query, {\n    query: ALL_AUTHORS,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, function (result) {\n    if (result.loading) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, \"loading...\");\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, \"Born\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, \"Books\")), result.data.allAuthors.map(function (a) {\n      return React.createElement(\"tr\", {\n        key: a.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, a.name), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, a.born), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, a.bookCount));\n    }))));\n  }));\n};\n\nexport default Authors;","map":{"version":3,"sources":["/home/aatu/programming/authors/library-frontend/src/components/Authors.js"],"names":["React","useState","Query","gql","ALL_AUTHORS","Authors","props","birthyear","setBirthyear","author","setAuthor","show","authors","result","loading","data","allAuthors","map","a","name","born","bookCount"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,KAAT,QAAsB,cAAtB;AACA,SAASC,GAAT,QAAoB,cAApB;AAEA,IAAMC,WAAW,GAAGD,GAAH,mBAAjB;;AAUA,IAAME,OAAO,GAAG,SAAVA,OAAU,CAAAC,KAAK,EAAI;AAAA,kBACWL,QAAQ,CAAC,EAAD,CADnB;AAAA;AAAA,MAChBM,SADgB;AAAA,MACLC,YADK;;AAAA,mBAEKP,QAAQ,CAAC,EAAD,CAFb;AAAA;AAAA,MAEhBQ,MAFgB;AAAA,MAERC,SAFQ;;AAIvB,MAAI,CAACJ,KAAK,CAACK,IAAX,EAAiB;AACf,WAAO,IAAP;AACD;;AACD,MAAMC,OAAO,GAAG,EAAhB;AAEA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,EAEE,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAER,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,UAAAS,MAAM,EAAI;AACT,QAAIA,MAAM,CAACC,OAAX,EAAoB;AAClB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACD;;AAED,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAHF,CADF,EAMGD,MAAM,CAACE,IAAP,CAAYC,UAAZ,CAAuBC,GAAvB,CAA2B,UAAAC,CAAC;AAAA,aAC3B;AAAI,QAAA,GAAG,EAAEA,CAAC,CAACC,IAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKD,CAAC,CAACC,IAAP,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKD,CAAC,CAACE,IAAP,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKF,CAAC,CAACG,SAAP,CAHF,CAD2B;AAAA,KAA5B,CANH,CADF,CADF,CADF;AAoBD,GA1BH,CAFF,CADF;AAiCD,CA1CD;;AA4CA,eAAehB,OAAf","sourcesContent":["import React, { useState } from \"react\"\nimport { Query } from \"react-apollo\"\nimport { gql } from \"apollo-boost\"\n\nconst ALL_AUTHORS = gql`\n  {\n    allAuthors {\n      name\n      born\n      bookCount\n    }\n  }\n`\n\nconst Authors = props => {\n  const [birthyear, setBirthyear] = useState(\"\")\n  const [author, setAuthor] = useState(\"\")\n\n  if (!props.show) {\n    return null\n  }\n  const authors = []\n\n  return (\n    <div>\n      <h2>Authors</h2>\n      <Query query={ALL_AUTHORS}>\n        {result => {\n          if (result.loading) {\n            return <div>loading...</div>\n          }\n\n          return (\n            <div>\n              <table>\n                <tbody>\n                  <tr>\n                    <th />\n                    <th>Born</th>\n                    <th>Books</th>\n                  </tr>\n                  {result.data.allAuthors.map(a => (\n                    <tr key={a.name}>\n                      <td>{a.name}</td>\n                      <td>{a.born}</td>\n                      <td>{a.bookCount}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          )\n        }}\n      </Query>\n    </div>\n  )\n}\n\nexport default Authors\n"]},"metadata":{},"sourceType":"module"}