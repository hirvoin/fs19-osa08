{"ast":null,"code":"import _slicedToArray from \"/home/aatu/programming/authors/library-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/home/aatu/programming/authors/library-frontend/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/aatu/programming/authors/library-frontend/src/components/Books.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  {\\n    allBooks {\\n      title\\n      published\\n      genres\\n      author {\\n        name\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { React, useState } from \"react\";\nimport { Query } from \"react-apollo\";\nimport { gql } from \"apollo-boost\";\nvar ALL_BOOKS = gql(_templateObject());\n\nvar Books = function Books(props) {\n  var _useState = useState(\"all\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      genresToShow = _useState2[0],\n      setGenresToShow = _useState2[1];\n\n  var disctinctGenres = [];\n\n  if (!props.show) {\n    return null;\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, \"Books\"), React.createElement(Query, {\n    query: ALL_BOOKS,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, function (result) {\n    if (result.loading) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, \"loading...\");\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, result.data.allBooks.forEach(function (book) {\n      book.genres.forEach(function (genre) {\n        if (!disctinctGenres.includes(genre)) {\n          disctinctGenres.push(genre);\n        }\n      });\n    }), console.log(result.data.allBooks, disctinctGenres), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, \"title\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, \"author\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, \"published\")), result.data.allBooks.map(function (a) {\n      return React.createElement(\"tr\", {\n        key: a.title,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, a.title), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, a.author.name), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, a.published));\n    }))), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"Filter books by genre:\"), disctinctGenres.map(function (genre) {\n      return React.createElement(\"button\", {\n        key: genre,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, genre);\n    }));\n  }));\n};\n\nexport default Books;","map":{"version":3,"sources":["/home/aatu/programming/authors/library-frontend/src/components/Books.js"],"names":["React","useState","Query","gql","ALL_BOOKS","Books","props","genresToShow","setGenresToShow","disctinctGenres","show","result","loading","data","allBooks","forEach","book","genres","genre","includes","push","console","log","map","a","title","author","name","published"],"mappings":";;;;;;;;;;;;;;AAAA,SAASA,KAAT,EAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,KAAT,QAAsB,cAAtB;AACA,SAASC,GAAT,QAAoB,cAApB;AAEA,IAAMC,SAAS,GAAGD,GAAH,mBAAf;;AAYA,IAAME,KAAK,GAAG,SAARA,KAAQ,CAAAC,KAAK,EAAI;AAAA,kBACmBL,QAAQ,CAAC,KAAD,CAD3B;AAAA;AAAA,MACdM,YADc;AAAA,MACAC,eADA;;AAErB,MAAMC,eAAe,GAAG,EAAxB;;AACA,MAAI,CAACH,KAAK,CAACI,IAAX,EAAiB;AACf,WAAO,IAAP;AACD;;AAED,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,EAEE,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAEN,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,UAAAO,MAAM,EAAI;AACT,QAAIA,MAAM,CAACC,OAAX,EAAoB;AAClB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACD;;AACD,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGD,MAAM,CAACE,IAAP,CAAYC,QAAZ,CAAqBC,OAArB,CAA6B,UAAAC,IAAI,EAAI;AACpCA,MAAAA,IAAI,CAACC,MAAL,CAAYF,OAAZ,CAAoB,UAAAG,KAAK,EAAI;AAC3B,YAAI,CAACT,eAAe,CAACU,QAAhB,CAAyBD,KAAzB,CAAL,EAAsC;AACpCT,UAAAA,eAAe,CAACW,IAAhB,CAAqBF,KAArB;AACD;AACF,OAJD;AAKD,KANA,CADH,EAQGG,OAAO,CAACC,GAAR,CAAYX,MAAM,CAACE,IAAP,CAAYC,QAAxB,EAAkCL,eAAlC,CARH,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAHF,CADF,EAMGE,MAAM,CAACE,IAAP,CAAYC,QAAZ,CAAqBS,GAArB,CAAyB,UAAAC,CAAC;AAAA,aACzB;AAAI,QAAA,GAAG,EAAEA,CAAC,CAACC,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKD,CAAC,CAACC,KAAP,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKD,CAAC,CAACE,MAAF,CAASC,IAAd,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKH,CAAC,CAACI,SAAP,CAHF,CADyB;AAAA,KAA1B,CANH,CATF,CADF,EAyBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAzBF,EA0BGnB,eAAe,CAACc,GAAhB,CAAoB,UAAAL,KAAK;AAAA,aACxB;AAAQ,QAAA,GAAG,EAAEA,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAqBA,KAArB,CADwB;AAAA,KAAzB,CA1BH,CADF;AAgCD,GArCH,CAFF,CADF;AA4CD,CAnDD;;AAqDA,eAAeb,KAAf","sourcesContent":["import { React, useState } from \"react\"\nimport { Query } from \"react-apollo\"\nimport { gql } from \"apollo-boost\"\n\nconst ALL_BOOKS = gql`\n  {\n    allBooks {\n      title\n      published\n      genres\n      author {\n        name\n      }\n    }\n  }\n`\nconst Books = props => {\n  const [genresToShow, setGenresToShow] = useState(\"all\")\n  const disctinctGenres = []\n  if (!props.show) {\n    return null\n  }\n\n  return (\n    <div>\n      <h2>Books</h2>\n      <Query query={ALL_BOOKS}>\n        {result => {\n          if (result.loading) {\n            return <div>loading...</div>\n          }\n          return (\n            <div>\n              <table>\n                {result.data.allBooks.forEach(book => {\n                  book.genres.forEach(genre => {\n                    if (!disctinctGenres.includes(genre)) {\n                      disctinctGenres.push(genre)\n                    }\n                  })\n                })}\n                {console.log(result.data.allBooks, disctinctGenres)}\n                <tbody>\n                  <tr>\n                    <th>title</th>\n                    <th>author</th>\n                    <th>published</th>\n                  </tr>\n                  {result.data.allBooks.map(a => (\n                    <tr key={a.title}>\n                      <td>{a.title}</td>\n                      <td>{a.author.name}</td>\n                      <td>{a.published}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n              <h3>Filter books by genre:</h3>\n              {disctinctGenres.map(genre => (\n                <button key={genre}>{genre}</button>\n              ))}\n            </div>\n          )\n        }}\n      </Query>\n    </div>\n  )\n}\n\nexport default Books\n"]},"metadata":{},"sourceType":"module"}